{%- doc -%}
  Renders a video element, from a video object (<video> element) or a video URL (<iframe> element)

  Shared parameters:
  @param {boolean} [video_autoplay]
  @param {boolean} [video_loop]
  @param {string}  [video_class]
  @param {string}  [video_style]
  @param {object}  [video_preview_image]
  @param {string}  [widths]
  @param {string}  [sizes]
  @param {string}  [loading]
  @param {string}  [additional_attributes]
  @param {string}  [video_type] 'youtube' or 'vimeo'
  @param {boolean} [disable_controls]
  @param {object}  video - Shopify video object OR string (YouTube/Vimeo ID)
  @param {string}  section_id
  @param {object}  [block]

  Video from URL:
  @param {boolean} [video_from_url]
  @param {string}  [video_alt]

  Example:
  {% render 'video', video: section.settings.video, section_id: section.id %}
{%- enddoc -%}

{% liquid
  assign block_settings = block.settings
  assign video_alt = video_alt | default: video.alt
  assign alt = 'blocks.load_video' | t: description: video_alt | escape
  assign cls = video_class | default: 'bg-video'
  assign fallback_img = battery_saver_image | default: video_preview_image
  
  # Responsive defaults for fallback image
  assign media_width_desktop = 100 | divided_by: 2 | append: 'vw'
  assign media_width_mobile = '100vw'
  assign sizes = '(min-width: 750px) ' | append: media_width_desktop | append: ', ' | append: media_width_mobile
  assign widths = '240, 352, 832, 1200, 1600, 1920, 2560, 3840'
%}

{% comment %} Handle external videos (YouTube/Vimeo) {% endcomment %}
{% if video_from_url %}
  {% liquid
    if video_type == 'youtube'
      assign video_src = 'https://www.youtube.com/embed/VIDEO_ID?' | replace: 'VIDEO_ID', video
      assign video_src = video_src | append: '&autoplay=1&mute=1&playsinline=1&controls=0&rel=0&modestbranding=1&fs=0&iv_load_policy=3&disablekb=1&loop=1&playlist=' | append: video
      assign iframe_class = 'js-youtube'
    else
      assign video_src = 'https://player.vimeo.com/video/VIDEO_ID?' | replace: 'VIDEO_ID', video
      assign video_src = video_src | append: '&background=1&autoplay=1&muted=1&loop=1&playsinline=1&title=0&byline=0&portrait=0'
      assign iframe_class = 'js-vimeo'
    endif
  %}
{% endif %}

{% if video != blank %}
  <div class="video-wrap {{ video_class }}" style="{{ video_style }}" {{ additional_attributes }}>
    {% if video_from_url %}
      {% comment %} External video (iframe) {% endcomment %}
      <iframe
        src="{{ video_src }}"
        class="{{ iframe_class }}"
        allow="autoplay; encrypted-media; picture-in-picture"
        allowfullscreen
        title="{{ video_alt | escape }}"
      ></iframe>
    {% else %}
      {% comment %} HTML5 video with poster removal trick {% endcomment %}
      {{-
        video
        | video_tag: image_size: '2500x', autoplay: true, loop: true, muted: true, controls: false
        | replace: '<video ', '<video playsinline webkit-playsinline preload="auto" '
        | replace: ' poster="', ' data-poster="'
      -}}
    {% endif %}
    
    {% if fallback_img %}
      <img class="video-fallback" src="{{ fallback_img | image_url: width: 2000 }}" alt="" loading="lazy" decoding="async">
    {% endif %}
  </div>

  <script>
  (() => {
    const wrap = document.currentScript.previousElementSibling;
    const v = wrap?.querySelector('video');
    const iframe = wrap?.querySelector('iframe');

    console.log('Video conserve mode:', window.videoConserveMode); // Debug

    // If we've already decided to conserve, fallback immediately
    if (window.videoConserveMode) { 
      console.log('Showing fallback due to conserve mode'); // Debug
      wrap.classList.add('--fallback'); 
      if (v) v.remove(); 
      if (iframe) iframe.remove();
      return; 
    }

    // Handle HTML5 video
    if (v) {
      console.log('Setting up HTML5 video'); // Debug
      v.muted = true;
      v.playsInline = true;

      const tryPlay = () => {
        console.log('Trying to play video'); // Debug
        return v.play().catch((error) => { 
          console.log('Video play failed:', error); // Debug
        });
      };

      // Try as early as possible, and on visibility return
      if (document.readyState === 'complete') tryPlay();
      else window.addEventListener('load', tryPlay, { once: true });
      document.addEventListener('visibilitychange', () => { 
        if (!document.hidden) tryPlay(); 
      });

      // If still paused shortly after, assume OS blocked autoplay -> fallback
      setTimeout(() => { 
        console.log('Checking video state after timeout. Paused:', v.paused); // Debug
        if (v.paused) {
          console.log('Video still paused, showing fallback'); // Debug
          wrap.classList.add('--fallback'); 
        }
      }, 700);
    }

    // Handle iframe video - show fallback immediately for external videos in conserve mode
    if (iframe && !v) {
      // For external videos, be more aggressive about showing fallback on mobile
      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      if (isMobile) {
        setTimeout(() => {
          wrap.classList.add('--fallback');
        }, 500);
      }
    }
  })();
  </script>
{% else %}
  <div
    {{ additional_attributes }}
    class="{%- if video_class -%}{{ video_class }} {%- endif -%}video-placeholder-wrapper"
    style="{%- if video_style -%}{{ video_style }} {%- endif -%}--video-placeholder-width: {{ block_settings.custom_width | default: 100 }}%;"
  >
    {{ 'hero-apparel-3' | placeholder_svg_tag }}
  </div>
{% endif %}

{% stylesheet %}
  .video-wrap { position: relative; overflow: hidden; }
  .video-wrap video,
  .video-wrap iframe,
  .video-wrap .video-fallback { 
    position: absolute; 
    inset: 0; 
    width: 100%; 
    height: 100%; 
    object-fit: cover; 
    display: block; 
  }
  .video-wrap video,
  .video-wrap iframe { pointer-events: none; }
  .video-wrap .video-fallback { 
    opacity: 0 !important; 
    transition: opacity .2s ease;
    pointer-events: none;
    visibility: hidden !important;
    z-index: -1;
  }
  .video-wrap.--fallback .video-fallback { 
    opacity: 1 !important; 
    pointer-events: auto;
    visibility: visible !important;
    z-index: 1;
  }
  .video-wrap.--fallback video,
  .video-wrap.--fallback iframe { display: none !important; } /* hides any native play icon */

  /* CSS-based fallback for reduced motion/data preferences */
  @media (prefers-reduced-motion: reduce) {
    .video-wrap .video-fallback { opacity: 1 !important; visibility: visible !important; }
    .video-wrap video,
    .video-wrap iframe { display: none !important; }
  }

  @media (prefers-reduced-data: reduce) {
    .video-wrap .video-fallback { opacity: 1 !important; visibility: visible !important; }
    .video-wrap video,
    .video-wrap iframe { display: none !important; }
  }
{% endstylesheet %}
